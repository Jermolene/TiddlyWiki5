created: 20130825162100000
modified: 20180627132000000
tags: Introduction
toc-order: 4
title: TiddlyWiki Architecture
type: text/vnd.tiddlywiki

The heart of ~TiddlyWiki is an extensible representation transformation engine for text and images. Given the text of a tiddler and its associated [[Content Type|https://tiddlywiki.com/#ContentType]], the engine can produce a rendering of the tiddler in a different [[Content Type|https://tiddlywiki.com/#ContentType]]. Furthermore, it can efficiently selectively update the rendering to track any changes in the tiddler or its dependents.


! The one thing you need to know

~TiddlyWiki's architecture is very different from an HTML page written using jQuery. This section concisely explains what ~TiddlyWiki does differently. It may not make much sense on the first reading.

The key to understanding how it works internally is to see that the ui refreshing mechanism requires that any region of the DOM can be regenerated at any time (similarly to [[React|https://reactjs.org/]], for those who know it). This means that the entire state of the user interface must reside in the tiddler store, from where it is synchronised into the DOM. This is done to improve performance by minimising the DOM interactions during the refresh cycles.

It also determines the standard UI flow:

# An event handler on a widget is triggered
# The event handler can manipulate the DOM nodes directly created by the widget, and/or modify the state of the tiddler store
# The core then issues a store change event which triggers the refresh cycle
# Each widget in the tree then gets a chance to refresh itself to reflect the changes in the store if they need to

From a technical perspective, ~TiddlyWiki is a fairly classic MVC architecture, with strict separation of concerns. The model is the tiddler store, the view is a rendering tree (such as the one created from [[$:/core/ui/PageTemplate]] in startup.js), and the controller is the core code itself.


! Overview

{{TiddlyWiki Architecture.svg}}

The processing pipeline shows how ~WikiText is parsed by a stack of parse rules into a parse tree. The parse tree is rendered as a tree of widgets, which is synchronised into the DOM via the refresh mechanism.

DOM events trigger actions on widgets which update the tiddler store. The updates trigger a change event which in turn triggers the refresh mechanism to update the DOM.

! Client/Server Architecture

{{Server Architecture.svg}}

! Model

~TiddlyWiki's data model is a fairly simple key-value store.

* Each [[tiddler|Tiddler as Basic Element]] is simply an object with a `fields` member containing members such as `title`, `text`, `tags` and so on.
* The core `Wiki` class defined in `boot/boot.js` implements simple associative array behaviours like insertion, deletion, iteration, listing keys, and get-by-key.
* The code in `core/modules/wiki.js` then extends the `Wiki` class with functionality such as event dispatch and various cache-backed methods such as `getTiddlersWithTag`.

The active tiddler store can be accessed via `$tw.wiki` as in this example:

```js
$tw.wiki.makeTiddlerIterator($tw.wiki.getTiddlersWithTag('timeline')
    )(function(tiddler, title) {
        // Skip templates
        if (tiddler.fields.tags.indexOf('templates') >= 0) { return; }

        do_something(tiddler);
});
```

Data which should not be visible to end users under normal operation (eg. internal components, plugins, persisted state for GUI widgets) is stored in [[system tiddlers|https://tiddlywiki.com/#SystemTiddlers]] organised via a set of [[namespaces|https://tiddlywiki.com/#Naming%20of%20System%20Tiddlers]].

TODO: Clarify next sentence? What is a "hierarchical browsing interface"?


The similarity between filesystem paths and system tiddler names is intentional and will be used to provide a hierarchical browsing interface in a future ~TiddlyWiki release.

! View

~TiddlyWiki's view layer has a //lot// in common with desktop widget toolkits and this is the part which is most likely to trip up newcomers. There are two facets to it:

!! Role of the DOM
Because ~TiddlyWiki may re-render content, plugins should treat the DOM as write-only.

In other words, any state you store in the DOM could vanish at any instant and you need to use ~TiddlyWiki's internal [[StateMechanism|https://tiddlywiki.com/#StateMechanism]] instead.

In a desktop application, the base widget class defines a method such as `paint(canvas)` which is called in response to `expose` events or "data has changed" messages.

In ~TiddlyWiki, the `Widget` class in `core/modules/widgets/widgets.js` defines a `render(parent, nextSibling)` method which ~TiddlyWiki calls in response to various events such as changes in the model.

TODO: Add a link to relevant documentation for the `refresh(changedTiddlers)` method


(The potential inefficiency of this approach is mitigated via a `refresh(changedTiddlers)` method which ~TiddlyWiki calls to ask your widget whether its current rendering is stale.)

!! Locus of Control

While ~TiddlyWiki's extended [[WikiText|WikiText Markup]] is similar in design to HTML templating languages with logic constructs, you can't just ignore it and assemble all of your content in raw Javascript because it is used to define most of ~TiddlyWiki's UI.

In this respect, it's closer to a glue language like Qt Quick or Python with Javascript filling the "create new components" role of C/C++ in widget toolkits like Qt and GTK+.

To familiarise yourself with this, read [[Widgets in WikiText|https://tiddlywiki.com/#Widgets%20in%20WikiText]] and [[Introduction to Filters|https://tiddlywiki.com/#Introduction%20to%20Filters]]. Then examine the internals for a tiddler like [[TaskManagementExample|https://tiddlywiki.com/#TaskManagementExample]].
