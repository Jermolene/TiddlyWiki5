created: 20140708081759619
modified: 20182606000000000
tags: Introduction
toc-order: 1
title: TiddlyWiki as Single Page Application


Traditional web applications are bound to HTTP concepts which include stateless requests to transfer data. 
In those applications, state is often emulated by the use of sessions, which need to be handled both on the client and on the server side.
These restrictions often lead to a fragmented user experience because the user interface is re-rendered on every data transfer.

~TiddlyWiki tries to overcome these restrictions and the resulting disadvantages by building on a few basic concepts:

First of all, ~TiddlyWiki shouldn't be thought of as a traditional server-generated dynamic web page. 
A more accurate depiction would be an application which is written entirely in ~JavaScript, and uses HTML5 and CSS3 to render a GUI. 
This means ~TiddlyWiki can be executed in any ~JavaScript environment such as a browser or a node.js instance, while keeping the advantages of a simple application.
One of these advantages is that ~TiddlyWiki has no need to <<.em emulate>> an application state, as a traditional web application would need to do.

The second concept concerns the storage of data. Unlike traditional web applications, 
~TiddlyWiki doesn't store the data in an external database but simply uses native ~JavaScript data structures to store [[Tiddlers|Tiddler as Basic Element]].
Additional [[core modules|Core Plugin]] provide a way to [[persist|Data Persistence]] this data in simple html `div` elements.


This architecture allows TiddlyWiki to be used as an offline-enabled single-file web application.

Besides, by using a server-side node.js environment running the ~TiddlyWiki application, ~TiddlyWiki can <<.em also>> be used as an online web application. 
This is acomplished server-side by providing an additional module to persist tiddlers into plain text files, and client-side by a module syncing the local data store with the node.js server.