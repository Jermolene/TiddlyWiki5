created: 20140717174120958
modified: 20140717202324456
tags: [[User Interface]]
toc-order: 1
title: Parser


The first stage of WikiText UI processing is the parser.
A Parser is provided by a module with ``module-type: parser`` and is responsible to transform a block of text into a parse-tree.
The parse-tree consists of nested nodes like this:


```js
{
    type: "element", 
    tag: <string>, 
    attributes: {}, 
    children: []
} - a HTML element

{
    type: "text", 
    text: <string>
} - a text node

{
    type: "entity", 
    entity: <string>
} - a HTML entity like &copy; for a copyright symbol

{
    type: "raw", 
    html: <string>
} - raw HTML
```

The [[Core Plugin]] provides a recursive descent ~WikiText parser which loads its individual rules from individual modules.

Thus a developer can provide additional rules by using ``module-type: wikirule``. Each rule can produce a list of parse-tree nodes.
A simple example for a wikirule producing a ``<hr>`` from ``---`` can be found in [[horizrule.js|$:/core/modules/parsers/wikiparser/rules/horizrule.js]]

HTML tags can be embedded into ~WikiText because of the [[html rule|$:/core/modules/parsers/wikiparser/rules/html.js]].
This rule matches HTML tag syntax and creates ``type: "element"`` nodes.
But the html-rule has another special purpose. By parsing the HTML tag syntax it implicitly parses ~WikiText widgets.
It the recognises them by the $ character at the beginning of the tag name and instead of producing "element" nodes 
it uses the tag name for the type:

```js
{
    type: "list", 
    tag: "$list", 
    attributes: {}, 
    children: []
} - a list element
```

The [[Widgets]] section explains why this makes sense and how each node is transformed into a widget.
Another special characteristic of the html-rule or the parse nodes in general is the `attributes` property.
Attributes in the parse-tree are not stored as simple strings but they are nodes of their own to make indirect text references available as attributes, as described in [[Widgets]]:

```js
{
    type: "string", 
    value: <string>
} - literal string

{
    type: "indirect", 
    textReference: <textReference>
} - indirect through a text reference
```

Here is a more advanced example:

```js
> JSON.stringify($tw.wiki.parseText("text/vnd.tiddlywiki","Some //italics// and a {{Transclusion}}.").tree)

[
	{
		type: "element", 
		tag: "p", 
		children: [
			{
				type: "text", 
				text: "Some "
			},
			{
				type: "element", 
				tag: "em", 
				children: [
					{
						type: "text", 
						text: "italics"
					}
				]
			},
			{
				type: "text", 
				text: " and a "
			},
			{
				type: "tiddler", 
				attributes: {
					tiddler: {
						type: "string", 
						value: "Transclusion"
					}
				}, children: [
					{
						type: "transclude", 
						attributes:{
							tiddler: {
								type: "string", 
								value: "Transclusion"
							}
						}
					}
				]
			},
			{
				type: "text", 
				text: "."
			}
		]
	}
]
```
