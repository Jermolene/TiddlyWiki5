created: 20210131035558151
modified: 20210204205309955
tags: Learning
title: Exploring the keyboard-driven-input Macro
type: text/vnd.tiddlywiki

\define kdi-demo-textmacrocall()
```
<$macrocall $name=keyboard-driven-input 
        tiddler="$(tiddler)$"
        storeTitle="$(storeTitle)$" 
        selectionStateTitle="$(selectionStateTitle)$" 
        configTiddlerFilter="$(configTiddlerFilter)$" 
 />
```
\end

<$vars configTiddlerFilter="[[kdi-demo-configtid]]" tiddler="kdi-demo-tiddler" storeTitle="kdi-demo-storeTitle" selectionStateTitle="kdi-demo-selectionStateTitle" >

The [[keyboard-driven-input Macro]] allows a filtered list to dynamically adapt to text entered in an input element. It wraps an ''[[edit-text widget|EditTextWidget]]'' with [[keyboard widgets|KeyboardWidget]] to allow navigation through the list using <kbd><<displayshortcuts ((input-up))>></kbd> and <kbd><<displayshortcuts ((input-down))>></kbd> keys, and confirmation or cancelling by keyboard shortcuts.

It does not generate a popup/dropdown showing the list of matches. Any visualisation of the filtered options list, and actions to be taken on selection of an option, are to be built to suit the use case.

''keyboard-driven-input'' can be seen in action as part of various core features in TiddlyWiki, e.g.: the [[tag-picker Macro]], the [[search feature|Searching in TiddlyWiki]], and the [[Insert link]] dropdown in the [[Editor toolbar]].

!!Minimal ingredients for a demonstration

A minimal demonstration of the ''keyboard-driven-input'' macro requires: 

1. ''A filter'' whose results depend on the user's text input. 

* This filter is used to generate the options that the user can select from.
* Store this in a field in a tiddler.
* The ''keyboard-driven-input'' macro can use up to two filters, each stored in a field of a tiddler.
* By default, the macro will look for filters in fields called <<.field first-search-filter>> and <<.field second-search-filter>>.

2. ''A filter'' to return the title of the tiddler where the filter(s) described in step 1 can be found.

* Provide this as a parameter, <<.param configTiddlerFilter>>.
* This is a filter, and not a tiddler title, because it allows different filters, stored in different tiddlers, to be used, depending on conditions (e.g. an active tab, or the presence of an optional filter with a default fallback). 

3. ''Tiddler titles'' to use for storing state information in response to input events.

* Provide these as the three following parameters:

** <<.param tiddler>>: This tiddler gets updated with each keystroke in the ''edit-text'' widget and when the user uses <kbd><<displayshortcuts ((input-up))>></kbd> or <kbd><<displayshortcuts ((input-down))>></kbd> key to cycle through filtered results. Depending on which happened more recently, it shows either the typed input or the instantaneous result selection.

** <<.param storeTitle>>: This tiddler reflects the user input by transcluding it from the tiddler <<.param tiddler>> after each keystroke into the ''edit-text'' widget.

** <<.param selectionStateTitle>>: This tiddler is updated with text comprised of the user's instantaneous selection and a suffix that indicates whether it came from the primary filter or the secondary filter list.

* Tiddlers with these titles do not need to exist already. If they do exist, the ''keyboard-driven-input'' macro will change their contents.

!!The search filter(s)

To make use of the text input element, it makes sense for at least one of the filters used to generate the list of options to be responsive to its content (otherwise, the simpler ''select'' widget might suffice). 

Text input is stored reactively in the <<.field text>> field of the <<.param storeTitle>> tiddler, so the filter should make use of that.  Usefully, in the definition of the macro that uses the filter within the ''keyboard-driven-input'' macro (called ''input-next-actions'', and invoked when the <kbd><<displayshortcuts ((input-up))>></kbd> or <kbd><<displayshortcuts ((input-down))>></kbd> key is pressed), this value is stored in a variable called <<.var userInput>>. 

''Note:'' If this filter is to be referred to in other contexts (such as in a popup showing the filtered options), <<.var userInput>> has to be defined in those contexts as well.

For this demonstration, the following filter will be used: 

<code><$list filter=<<configTiddlerFilter>> ><$text text={{!!first-search-filter}}/></$list></code>. 

This filters for titles of non-system tiddlers that contain the text the user has typed.

!!Demonstration setup

I have created a tiddler called <$list filter=<<configTiddlerFilter>> /> and put the above filter into its <<.field first-search-filter>> field. That means the value of the parameter <<.param configTiddlerFilter>> should be a filter that returns <$list filter=<<configTiddlerFilter>> />.

I can select <<.param tiddler>>, <<.param storeTitle>>, and <<.param selectionStateTitle>> fairly arbitrarily (just making sure not to use titles of tiddlers that I do not want changed).

This demonstration can now be invoked with the following macro call:

<<kdi-demo-textmacrocall>>

!!Demo

Type something in here: <$macrocall $name=keyboard-driven-input 
        tiddler=<<tiddler>>
        storeTitle=<<storeTitle>> 
        selectionStateTitle=<<selectionStateTitle>> 
        configTiddlerFilter=<<configTiddlerFilter>> 
 />

Use <kbd><<displayshortcuts ((input-up))>></kbd> and <kbd><<displayshortcuts ((input-down))>></kbd> keys to navigate among filter results, and observe the changes in the various state tiddlers below:

|<<.field text>> field of {{{[<tiddler>]}}}|<pre><$text text={{{[<tiddler>get[text]]}}}/></pre>|
|<<.field text>> field of {{{[<storeTitle>]}}}|<pre><$text text= {{{[<storeTitle>get[text]]}}}/></pre>|
|<<.field text>> field of {{{[<selectionStateTitle>]}}}|<pre><$text text={{{[<selectionStateTitle>get[text]]}}}/></pre>|
|<<.field first-search-filter>> field of <$list filter=<<configTiddlerFilter>> />|<pre><$list filter=<<configTiddlerFilter>> ><$text text={{!!first-search-filter}}/></$list></pre>|

!!Next steps

The ''keyboard-driven-events'' macro has many parameters available, including all the attributes of the enclosed ''edit-text'' widget.

Set at least the <<.param inputAcceptActions>> parameter to use the contents of the tiddler named in <<.param selectionStateTitle>> for something. Inspect available parameters of ''keyboard-driven-input'' and the attributes of the ''edit-text'' widget for useful options.

Build more features as appropriate. One obvious possibility would be a visible list, with the current selection highlighted (think of studying [[$:/core/ui/DefaultSearchResultList]] in that case).

See also: [[Customising search results]]