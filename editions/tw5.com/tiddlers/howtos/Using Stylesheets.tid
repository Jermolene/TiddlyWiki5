created: 20140305091244145
modified: 20190213000000000
tags: [[Customise TiddlyWiki]]
title: Using Stylesheets
type: text/vnd.tiddlywiki

\define tv-config-toolbar-text() yes

\define openCpTheme()
<$action-setfield $tiddler="$:/state/tab-1749438307" $value="$:/core/ui/ControlPanel/Appearance"/>
<$action-setfield $tiddler="$:/state/tab--1963855381" $value="$:/core/ui/ControlPanel/Theme"/>
<$action-navigate $to="$:/ControlPanel"/>
\end

! Theme and Colorpalette

The first steps to changing the appearance of ~TiddlyWiki are to choose and apply:

* One of the available themes: <span class="tc-btn-standard"> {{$:/core/ui/Buttons/theme}} </span>
* Modify the [[colour palette|ColourPalettes]]: <span class="tc-btn-standard"> {{$:/core/ui/Buttons/palette}} </span>
* Experiment with the <$button actions=<<openCpTheme>> >{{$:/core/images/options-button}} ~ControlPanel</$button>

! Work with Stylesheets

In addition to the Control Panel, custom styles can be defined by tagging a tiddler with: <<.tag $:/tags/Stylesheet>>. 

~TiddlyWiki renders all tiddlers tagged <<.tag $:/tags/Stylesheet>> into a `<style>` element. Tiddlers of [[content type|ContentType]] `text/css` will be processed as raw CSS, but tiddlers with the content type `text/vnd.tiddlywiki` (the default) are processed by first wikifying them, and then extracting the plain text portion. 

In order to change the page background colour to red, try creating a custom stylesheet now in a new tiddler with the following content :

```
body.tc-body {
	background: red;
}
```
Did you remember to tag the new stylesheet tiddler with <<.tag $:/tags/Stylesheet>> ?

!! Additional Resrouces

* [[Cascading Style Sheets (CSS) at mozilla|https://developer.mozilla.org/en-US/docs/Web/CSS]]
* [[Cascading Style Sheets (CSS) at w3schools|http://www.w3schools.com/css]]

! Overriding Theme Settings

Custom stylesheets are applied independently from theme stylesheets. Therefore, it is often necessary for the CSS rules in your custom stylesheet to be more specific than those of the theme you want to override. For example, `html body.tc-body` is more specific than `body.tc-body`. 

<<.tip "''You should always start with the least specific value that works!''<br><br>">>

!!Finding the right style setting to modify

You can inspect the theme's CSS stylesheet and other stylesheets being used in the <<.button control-panel>> under the <<.controlpanel-tab Info>> tab, <<.controlpanel-tab Advanced>> subtab, <<.controlpanel-tab Stylesheets>> section tab.

To find the right CSS styles to modify, use your browser's <<.word Inspect>> tool. For example, in Firefox, right click on the area of interest and select the <<.word "Inspect Element">> option (or similarly worded option in other browsers that have an <<.word Inspect>> feature).



!!Change the cascade order

CSS by definition is cascading, and the stylesheet's order is important, with the ''highest preference'' given to the ''last item listed''. You can see the order in the Control Panel. Re-order them by clicking on any <<tag $:/tags/Stylesheet>>pill. In the drop-down menu, drag the tiddler links to their new position in the list.

! Stylesheet Types

Usually it is fine to use the [[type|ContentType]] `text/css` for stylesheets. This treats them as plain stylesheets, and ensures that ~TiddlyWiki doesn't apply any WikiText processing to them.

If you wish to use macros and transclusions in your stylesheets you should instead use the default WikiText type `text/vnd.tiddlywiki`. This allows full ~WikiText processing to be performed. Here is an example:

```
\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html

body.tc-body pre {
	<<box-shadow "inset 0 1px 0 #fff">>
}
```

The `\rules` [[pragma|Pragma]] at the top of the tiddler restricts the ~WikiText to just allow macros and transclusion. This avoids mistakenly triggering unwanted ~WikiText processing.

The stylesheet tiddler is processed such that it is first wikified and then the text portion of the ouput is extracted to apply as the CSS. Any HTML tags you will use in your stylesheet are thus ignored. For example, HTML elements generated by the RevealWidget will not affect the output. As in the following example, you can wrap CSS rules in `<pre>` tags to display them as a codeblock without affecting processing, including handling the inner macro.

```
\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html

<pre>body.tc-body pre {
	<<box-shadow "inset 0 1px 0 #fff">>
}
</pre>
```

!! Stylesheet Macros

The ~TiddlyWiki core provides several [[global Stylesheet Macros|Stylesheet Macros]] that are helpful in constructing stylesheets.

!!More ways to Style your ~TiddlyWiki and Tiddlers

* [[Custom Styles FAQ]]
* [[Colour Palettes|ColourPalettes]]
* [[Styles and Classes in WikiText]]
* [[How to apply custom styles]]
* [[Hard Linebreaks with CSS]]
* [[Hide the author's and other fields|How to hide the author's and other fields with CSS]]
* Formatting List Results as Tables with CSS
**  [[Specified Columns Methods|Formatting List Results as Tables with CSS - Specified Columns Methods]] 
** [[Variable Column Method|Formatting List Results as Tables with CSS - Variable Column Method]]
