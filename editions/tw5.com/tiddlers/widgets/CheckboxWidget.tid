caption: checkbox
created: 20131024141900000
modified: 20211009121239806
tags: Widgets TriggeringWidgets
colors: red orange yellow blue
title: CheckboxWidget
type: text/vnd.tiddlywiki

\define checkActions() <$action-listops $field="colors" $subfilter="-red green"/>
\define uncheckActions() <$action-listops $field="colors" $subfilter="red -green"/>

\define filterExample()
<$checkbox filter="[list[!!colors]]" checked="green" unchecked="red" default="red" checkactions=<<checkActions>> uncheckactions=<<uncheckActions>> > Is "green" in colors?</$checkbox><br />''colors:'' {{!!colors}}
\end

\define filterExampleWithoutDefault()
<$checkbox filter="[list[!!colors]]" checked="green" unchecked="red" checkactions=<<checkActions>> uncheckactions=<<uncheckActions>> > Is "green" in colors?</$checkbox><br />''colors:'' {{!!colors}}
\end

\define display-variable(name)
''<$text text=<<__name__>>/>'': <code><$text text={{{ [<__name__>getvariable[]] }}}/></code>
\end

! Introduction

The checkbox widget displays an HTML `<input type="checkbox">` element that is dynamically bound to either:

* the presence or absence of a specified tag on a specified tiddler
* the value of a specified field of a specified tiddler

! Content and Attributes

The content of the `<$checkbox>` widget is displayed within an HTML `<label>` element immediately after the checkbox itself. This means that clicking on the content will toggle the checkbox.

|!Attribute |!Description |
|tiddler |Title of the tiddler to manipulate (defaults to the [[current tiddler|Current Tiddler]]) |
|tag |The name of the tag to which the checkbox is bound |
|invertTag |When set to ''yes'', flips the tag binding logic so that the absence of the tag causes the checkbox to be checked  |
|field |The name of the field to which the checkbox is bound |
|listField |<<.from-version "5.2.3">> The name of the field that contains the list to which the checkbox is bound |
|filter |<<.from-version "5.2.3">> A filter whose output determines the checked state of the checkbox |
|index|<<.from-version "5.1.14">> The index of the //tiddler//, a [[DataTiddler|DataTiddlers]], to which the checkbox is bound<<.tip "be sure to set the //tiddler// correctly">>|
|listIndex |<<.from-version "5.2.3">> Like <<.attr index>>, but treats the value as a list the same way that <<.attr listField>> does |
|checked |The value of the field corresponding to the checkbox being checked |
|unchecked |The value of the field corresponding to the checkbox being unchecked |
|default |The default value to use if the field is not defined |
|class |The class that will be assigned to the label element |
|actions |<<.from-version "5.1.14">> A string containing ActionWidgets to be triggered when the status of the checkbox changes (whether it is checked or unchecked) |
|uncheckactions |<<.from-version "5.1.16">> A string containing ActionWidgets to be triggered when the checkbox is unchecked |
|checkactions |<<.from-version "5.1.20">> A string containing ActionWidgets to be triggered when the checkbox is checked |
|disabled|<<.from-version "5.1.23">> Optional, disables the checkbox if set to "yes". Defaults to "no"|

!! Tag Mode

Using the checkbox widget in tag mode requires the ''tag'' attribute to specify the name of the tag. The ''tiddler'' attribute specifies the tiddler to target, defaulting to the current tiddler if not present.

This example creates a checkbox that flips the ''done'' tag on the current tiddler:

<<wikitext-example-without-html """<$checkbox tag="done"> Is it done?</$checkbox>""">>

!! Field Mode

Using the checkbox widget in field mode requires the ''field'' attribute to specify the name of the field. The ''checked'' and ''unchecked'' attributes specify the values to be assigned to the field to correspond to its checked and unchecked states respectively. The ''default'' attribute is used as a fallback value if the field is not defined.

This example creates a checkbox that is checked if the field ''status'' is equal to ''open'' and unchecked if the field is equal to ''closed''. If the field is undefined then it defaults to ''closed'', meaning that the checkbox will be unchecked if the ''status'' field is missing.

<<wikitext-example-without-html """<$checkbox field="status" checked="open" unchecked="closed" default="closed"> Is it open?</$checkbox><br />''status:'' {{!!status}}""">>

!! List Mode

Using the checkbox widget in list mode requires the ''listField'' attribute to specify the name of a field containing a list. The ''checked'' attribute specifies the value that should be present or absent in the list when the checkbox is checked or unchecked respectively. If ''checked'' is absent (or empty) but ''unchecked'' is present, then the checkbox will be checked when the "unchecked" is missing from the list, and unchecked when the "unchecked" value is found in the list. Finally, if both ''checked'' and ''unchecked'' are present, the checkbox will work like a toggle, replacing the ''checked'' value with the ''unchecked'' value and vice-versa.

If both ''checked'' and ''unchecked'' are specified but neither value are found in the list, the checkbox will be in an "indeterminate" state. The "indeterminate" state counts as unchecked or "false", but most browsers will display it differently.

The ''default'' attribute is used as a fallback for the checkbox state if the field is not defined.

This example creates a checkbox that is checked if the list field named ''colors'' contains ''red'' and unchecked if the field contains ''green''. If the field is undefined, or if neither ''red'' nor ''green'' appears in the field, then it defaults to ''green'', meaning that the checkbox will be unchecked.

<<wikitext-example-without-html """<$checkbox field="colors" fieldMode="list" checked="red" unchecked="green" default="green"> Is it red?</$checkbox><br />''colors:'' {{!!colors}}""">>

!! Filter Mode

Using the checkbox widget in filter mode requires the ''filter'' attribute to contain a filter whose output will determine the checked state of the checkbox. In filter mode, checking the checkbox will not automatically make changes to any field of any tiddler. Instead, you can use the ''actions'' attribute (or ''checkactions'' and ''uncheckactions'') to specify what should happen when the checkbox is toggled. It is your responsibility to make sure the actions cause changes to the tiddlers or fields that the filter results depend on, so that the checkbox becomes properly checked or unchecked after the actions have triggered.

If the filter returns an empty result, the checkbox will be unchecked. Otherwise, if the filter result is non-empty, the checkbox will be checked. However, if either the ''checked'' or ''unchecked'' attributes (or both) are specified, then their values will be looked for in the filter result, instead of considering any non-empty value to mean "checked".

Note that if both ''checked'' and ''unchecked'' are specified, //and// neither value is present in the filter result, the checkbox will be in an "indeterminate" state. The "indeterminate" state counts as unchecked or "false", but most browsers will display it differently.

This example creates the same checkbox as in the list mode example, selecting between ''red'' and ''green'' in the ''colors'' list field, but using filters and actions to make the change.

The next two examples use the following predefined variables:

* <<display-variable checkedActions>>
* <<display-variable uncheckedActions>>

<$macrocall $name=wikitext-example-without-html src=<<filterExample>> />

In this example the ''default'' attribute is omitted so you can see what happens if the checkbox is in an indeterminate state.

<$button>
<$action-listops $field="colors" $subfilter="-red -green orange yellow blue"/>
Remove red and green from list
</$button>

<$macrocall $name=wikitext-example-without-html src=<<filterExampleWithoutDefault>> />

Try editing this tiddler and removing or modifying the ''checked'' and ''unchecked'' attributes to see what happens if one or both are absent.

!! Index Mode

To use the checkbox widget in index mode set the ''index'' attribute to the index of a [[DataTiddler|DataTiddlers]]. The ''checked'' and ''unchecked'' attributes specify the values to be assigned to the index and correspond to its checked and unchecked states respectively. The ''default'' attribute is used as a fallback value if the index is undefined.

The example below creates a checkbox that is checked if the index by the name of this tiddler in the tiddler ExampleData is equal to ''selected'' and unchecked if the index is an empty string. If the index is undefined then it defaults to an empty string, meaning the checkbox will be unchecked if the index is missing.

<$macrocall $name="wikitext-example-without-html" src="""<$checkbox tiddler="ExampleData" index=<<currentTiddler>> checked="selected" unchecked="" default=""> Selected?</$checkbox>"""/>

!! Index List Mode

Using the checkbox widget in index list mode requires the ''listIndex'' attribute to specify the the index of a [[DataTiddler|DataTiddlers]] containing a list. The ''checked'' attribute specifies the value that should be present or absent in the list when the checkbox is checked or unchecked respectively. If ''checked'' is absent (or empty) but ''unchecked'' is present, then the checkbox will be checked when the "unchecked" is missing from the list, and unchecked when the "unchecked" value is found in the list. Finally, if both ''checked'' and ''unchecked'' are present, the checkbox will work like a toggle, replacing the ''checked'' value with the ''unchecked'' value and vice-versa.

If both ''checked'' and ''unchecked'' are specified but neither value are found in the list, the checkbox will be in an "indeterminate" state. The "indeterminate" state counts as unchecked or "false", but most browsers will display it differently.

The ''default'' attribute is used as a fallback for the checkbox state if the index is undefined.

This example creates a checkbox that is checked if the list field named ''colors'' contains ''red'' and unchecked if the field contains ''green''. If the field is undefined, or if neither ''red'' nor ''green'' appears in the field, then it defaults to ''green'', meaning that the checkbox will be unchecked.

<$macrocall $name="wikitext-example-without-html" src="""
<$set name=indexName filter="[<currentTiddler>addsuffix[ Colors]]" >
<$checkbox tiddler="ExampleData" listIndex=<<indexName>> checked="green" unchecked="red" default=""> Green or red?</$checkbox> <br/>
<$checkbox tiddler="ExampleData" listIndex=<<indexName>> checked="yellow" unchecked="blue" default=""> Yellow or blue?</$checkbox> <br/>
<$checkbox tiddler="ExampleData" listIndex=<<indexName>> checked="orange" unchecked="purple" default=""> Orange or purple?</$checkbox> <br />
Colors list: {{{ [[ExampleData]getindex<indexName>] }}}
</$set>
"""/>
