created: 20210618133745003
from-version: 5.3.0
modified: 20230430155810069
rp-input: <<.olink all>> tiddler titles, unless otherwise determined by the first [[filter operator|Filter Operators]]
rp-output: the string <<.value true>> or an empty list
rp-purpose: compute a Boolean combination of the results of this and previous runs
rp-suffix: Boolean operation to compute, can be <<.value and>> (the default), <<.value or>>, <<.value xor>>, <<.value nand>>, <<.value nor>> or <<.value xnor>>
tags: [[Named Filter Run Prefix]]
title: Boolean Filter Run Prefix
type: text/vnd.tiddlywiki

\define .op-row()
<$macrocall $name=".if"
	cond="""$(op-body)$"""
	then="""<tr><th align="left">$(op-head)$</th><td><<.op-place>>$(op-body)$</td></tr>"""
	else=""/>
\end

<style>
.doc-op-comparison {
  table-layout: fixed;
  width: 80%;
}
.doc-op-comparison th .doc-operator {
  background-color: unset;
  color: #666;
}
</style>

<$list filter="[all[current]tag[Named Filter Run Prefix]]">
	<$macrocall $name=".breadcrumbs" stop="Filters" mode={{$:/config/docs/breadcrumbs/filterMode}}/>
	<$let op-head="" op-body="" op-name="">
		<table class="doc-table">
			<!-- purpose -->
			<$let op-head="purpose" op-body={{!!rp-purpose}}>
				<<.op-row>>
			</$let>
			<!-- input -->
			<$let op-head="[[input|Filter Expression]]" op-body={{!!rp-input}}>
				<<.op-row>>
			</$let>
			<!-- suffix -->
			<$let op-head="suffix" op-body={{!!rp-suffix}} op-name={{!!rp-suffix-name}}>
				<<.op-row>>
			</$let>
			<!-- output -->
			<$let op-head="output" op-body={{!!rp-output}}>
				<<.op-row>>
			</$let>
		</table>
		<$list filter="[all[current]has[from-version]]" variable="listItem">
			<$macrocall $name=".from-version" version={{!!from-version}}/>
		</$list>
	</$let>
</$list>

<$railroad text="""
\start none
\end none
 ":boolean"
( | :":"
( : "and" | "or" | "xor" | "xnor" | "nand" | "nor" )
)
[[run|"Filter Run"]]
"""/>

!Introduction

The <<.op :boolean>> filter run prefix is used to evaluate Boolean operations on filter runs. The result of all previous filter runs so far is one Boolean value and the result of the <<.op :boolean>> filter run is the other.

The following binary (two inputs) Boolean operations are available:

* <<.value and>> (conjunction)
* <<.value or>> (disjunction)
* <<.value xor>> (exclusive disjunction)
* <<.value xnor>> (equality)
* <<.value nand>>
* <<.value nor>>


!! Truth value

The //truth value// is defined such that any non-empty list of items represents <<.value true>> and an empty list represents <<.value false>>.

<<.tip "Note that a list with a single empty string item is not an empty list and therefore represents <<.value true>>.">>

When the Boolean operation yields a true result, the filter run outputs the string <<.value true>>. When the result is false, the output is empty.


!! Boolean operations
The following truth table shows the results for all available Boolean operations.

|tc-center|k
| !A | !B | !A and B | !A or B | !A xor B | !A xnor B | !A nand B | !A nor B |
| false | false | false | false | false | true | true | true |
| false | true | false | true | true | false | true | false |
| true | false | false | true | true | false | true | false |
| true | true | true | true | false | true | false | false |


!! <<.op :boolean:and>> versus <<.op :and>> (<<.op +>>)

The input to an <<.op :and>> filter run is the output of all previous runs. The input to <<.op :boolean:and>> is `[all[tiddlers]]`. Both run prefixes can give different results, also regarding the //truth value// of the result:

|doc-op-comparison tc-center|k
| !<<.op :boolean:and>> | !<<.op :and>> |
|^<<.operator-example m1-1 "[tag[WikiText]] :boolean:and[tag[TableOfContents]]">><p>Determines if there are tiddlers with the tag <<tag WikiText>> and also (possibly different) tiddlers with the tag <<tag TableOfContents>> in the wiki.</p>|^<<.operator-example m1-2 "[tag[WikiText]] :and[tag[TableOfContents]]">><p>Determines if there are tiddlers with both tags <<tag WikiText>> and <<tag TableOfContents>> in the wiki.</p>|


!! <<.op :boolean:or>> versus <<.op :or>> (no prefix)

The filter run prefixes <<.op :boolean:or>> and <<.op :or>> are similar in their operation. However, their outputs are different. Where <<.op :or>> will output a [[Title List]], <<.op :boolean:or>> will only output <<.value true>> or an empty list.

|doc-op-comparison tc-center|k
| !<<.op :boolean:or>> | !<<.op :or>> |
|^<<.operator-example m2-1 "[tag[WikiText]] :boolean:or[tag[TableOfContents]]">> |^<<.operator-example m2-2 "[tag[WikiText]] :or[tag[TableOfContents]]">>The following filter expression is equivalent to <<.op :boolean:or>><<.operator-example m2-3 "[tag[WikiText]] :or[tag[TableOfContents]] :and[count[]compare:number:gt[0]then[true]]">>|







! [[Examples|Boolean Filter Run Prefix (Examples)]]

