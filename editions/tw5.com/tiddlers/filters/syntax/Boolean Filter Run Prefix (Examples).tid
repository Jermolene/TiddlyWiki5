created: 20230430151543614
modified: 20230430151543614
tags: [[Boolean Filter Run Prefix]]
title: Boolean Filter Run Prefix (Examples)

!! Basic binary operation

In this example we check if both tiddlers [[Cascade Filter Run Prefix]] and [[Reduce Filter Run Prefix]] are currently //not// open in the story. The negated operations can be useful if <<.attr emptyMessage>> would otherwise be longer than the content.

<$macrocall $name='wikitext-example-without-html'
src="""<$list filter="[list[$:/StoryList]match[Cascade Filter Run Prefix]] :boolean:nand[list[$:/StoryList]match[Reduce Filter Run Prefix]]"
       emptyMessage="All my favorite filter run prefixes are here!">
Go ahead, open [[Cascade Filter Run Prefix]] and [[Reduce Filter Run Prefix]].
</$list>"""/>

!! Unary operation

To implement the unary (single input) Boolean operation //not//, we can use `:boolean:nor` without a previous filter run.

<$macrocall $name='wikitext-example-without-html'
src="""<$list filter=":boolean:nor[tag[Bonanza]]">
[[Yes, We Have No Bonanza.|https://en.wikipedia.org/wiki/Yes,_We_Have_No_Bonanza]]
</$list>"""/>


!! More complicated expressions

Boolean operations can also be nested. In this example we check if //A and (B or C)// is true:
<$macrocall $name='wikitext-example-without-html'
src="""<$let subcondition="[{B}match[true]] :boolean:or[{C}match[true]]">
<$list filter="[{A}match[true]] :boolean:and[subfilter<subcondition>]"
       emptyMessage="Condition //A and (B or C)// has //not// been met.">
Condition //A and (B or C)// has been met.
</$list>
</$let>

<$let toggleTarget={{{ [{A}match[true]then[false]else[true]] }}}><$button set="A" setTo=<<toggleTarget>>>Toggle A to <<toggleTarget>></$button></$let>
<$let toggleTarget={{{ [{B}match[true]then[false]else[true]] }}}><$button set="B" setTo=<<toggleTarget>>>Toggle B to <<toggleTarget>></$button></$let>
<$let toggleTarget={{{ [{C}match[true]then[false]else[true]] }}}><$button set="C" setTo=<<toggleTarget>>>Toggle C to <<toggleTarget>></$button></$let>
"""/>
