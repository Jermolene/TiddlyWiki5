title: $:/core/macros/tag-picker
tags: $:/tags/Global
first-search-filter: [subfilter<tagListFilter>!is[system]search:title<userInput>sort[]]
second-search-filter: [subfilter<tagListFilter>is[system]search:title<userInput>sort[]]

<!-- first-search-filter and second-search-filter fields are not used here in the code, but they are defined as parameters for keyboard-driven-input macro -->

\whitespace trim

<!-- this one is needed if several tap-pickers targetting the same tiddler but different fields are shown in the same tiddler -->
\function tagpicker-dropdown-id() [<qualify "$:/state/popup/tags-auto-complete">] [[$(tagField)$-$(tagListFilter)$]substitute[]sha256[]] +[join[/]]

\procedure get-tagpicker-focus-selector() [data-tiddler-title=`$(thisTiddler)$`] .tc-add-tag-name input

<!-- clean up temporary tiddlers, so the next "pick" starts with a clean input -->
<!-- This could probably be optimized / removed if we would use different temp-tiddlers
	(future improvement because keeping track is comlex for humans)
-->
\procedure delete-tag-state-tiddlers()
<$action-deletetiddler $filter="[<newTagNameTiddler>] [<storeTitle>] [<tagSelectionState>]"/>
\end

<!-- trigger __toggle tag__ by keyboard -->
\procedure add-tag-actions()
<$let tag=<<_tf.getTag>> >
	<$action-listops $tiddler=<<saveTiddler>> $field=<<tagField>> $subfilter='+[toggle<tag>trim[]]'/>
	<% if [<tag>] :intersection[<saveTiddler>get<tagField>enlist-input[]] %>
		<!-- tag has been removed - do nothing -->
	<% else %>
		<<actions>>
	<% endif %>
	<<delete-tag-state-tiddlers>>
	<$action-setfield $tiddler=<<refreshTitle>> text="yes"/>
</$let>
\end
<!-- <$action-log  /> -->

<!-- ESC key removes the text from the input
The second ESC tries to close the "draft tiddler"
-->
\procedure clear-tags-actions-inner()
<% if [<storeTitle>has[text]] ~[<newTagNameTiddler>has[text]] %>
	<<delete-tag-state-tiddlers>>
<% else %>
		<<cancel-delete-tiddler-actions "cancel">>
<% endif %>
\end

<!-- triggered by keyboard only -->
\procedure clear-tags-actions()
<$let userInput=<<_tf.getUserInput>> >
	<!-- this list __cannot__ be transformed to conditional IF -->
	<$list filter="[<newTagNameTiddler>get[text]!match<userInput>]" >
		<$list-empty>
			<<clear-tags-actions-inner>>
		</$list-empty>
		<$action-setfield $tiddler=<<newTagNameTiddler>> text=<<userInput>>/>
		<$action-setfield $tiddler=<<refreshTitle>> text="yes"/>
	</$list>
</$let>
\end

<!-- similar to add-tag-actions __but__ add-only -->
\procedure add-button-actions()
<$action-log />
<$action-listops $tiddler=<<saveTiddler>> $field=<<tagField>> $subfilter="[<tag>trim[]]"/>
<<actions>>
<<delete-tag-state-tiddlers>>
<$action-sendmessage $message="tm-focus-selector" $param=<<get-tagpicker-focus-selector>>/>
\end

<!-- create dropdown list -->
\procedure tag-picker-listTags(filter, suffix)
<$let userInput=<<_tf.getUserInput>> >
	<$list filter="[<userInput>minlength{$:/config/Tags/MinLength}limit[1]]"
		emptyMessage="<div class='tc-search-results'>{{$:/language/Search/Search/TooShort}}</div>" variable="listItem"
	>
		<$list filter=<<filter>> variable="tag">
			<!-- Not sure if the button-classes are needed here -->
			<$let currentTiddler=<<tag>>
				button-classes=`tc-btn-invisible ${ [<tag>addsuffix<suffix>] -[<tagSelectionState>get[text]] :then[[]] ~tc-tag-button-selected }$`
			>
				{{||$:/core/ui/TagPickerTagTemplate}}
			</$let>
		</$list>
	</$list>
</$let>
\end

<!-- tag-picker-inner is the main function -->
\procedure tag-picker-inner()
<$let newTagNameInputTiddlerQualified=<<qualify "$:/temp/NewTagName/input">>
	newTagNameSelectionTiddlerQualified=<<qualify "$:/temp/NewTagName/selected-item">>
	fallbackTarget={{{ [<palette>getindex[tag-background]] }}}
	colourA={{{ [<palette>getindex[foreground]] }}}
	colourB={{{ [<palette>getindex[background]] }}}

	storeTitle={{{ [<newTagNameInputTiddler>!match[]] ~[<newTagNameInputTiddlerQualified>] }}}
	tagSelectionState={{{ [<newTagNameSelectionTiddler>!match[]] ~[<newTagNameSelectionTiddlerQualified>] }}}

	refreshTitle=<<qualify "$:/temp/NewTagName/refresh">>
	nonSystemTagsFilter="[subfilter<tagListFilter>!is[system]search:title<userInput>sort[]]"
	systemTagsFilter="[subfilter<tagListFilter>is[system]search:title<userInput>sort[]]"
>
	<div class="tc-edit-add-tag">
		<div>
			<span class="tc-add-tag-name tc-small-gap-right">
				<$macrocall	$name="keyboard-driven-input"
					tiddler=<<newTagNameTiddler>>
					storeTitle=<<storeTitle>>
					refreshTitle=<<refreshTitle>>
					selectionStateTitle=<<tagSelectionState>>
					inputAcceptActions=<<add-tag-actions>>
					inputCancelActions=<<clear-tags-actions>>
					tag="input"
					placeholder={{$:/language/EditTemplate/Tags/Add/Placeholder}}
					focusPopup=<<tagpicker-dropdown-id>>
					class="tc-edit-texteditor tc-popup-handle"
					tabindex=<<tabIndex>>
					focus={{{ [{$:/config/AutoFocus}match[tags]then[true]] ~[[false]] }}}
					filterMinLength={{$:/config/Tags/MinLength}}
					cancelPopups=<<cancelPopups>>
					configTiddlerFilter="[[$:/core/macros/tag-picker]]"
				/>
			</span>
			<$button popup=<<tagpicker-dropdown-id>>
				class="tc-btn-invisible tc-btn-dropdown"
				tooltip={{$:/language/EditTemplate/Tags/Dropdown/Hint}}
				aria-label={{$:/language/EditTemplate/Tags/Dropdown/Caption}}
			>
				{{$:/core/images/down-arrow}}
			</$button>
			<$reveal state=<<storeTitle>> type="nomatch" text="">
				<$button actions=<<delete-tag-state-tiddlers>>
					class="tc-btn-invisible tc-small-gap tc-btn-dropdown"
					tooltip={{$:/language/EditTemplate/Tags/ClearInput/Hint}}
					aria-label={{$:/language/EditTemplate/Tags/ClearInput/Caption}}
				>
					{{$:/core/images/close-button}}
				</$button>
			</$reveal>
			<span class="tc-add-tag-button tc-small-gap-left">
				<$let tag=<<_tf.getTag>>>
					<$button set=<<newTagNameTiddler>> actions=<<add-button-actions>> >
						{{$:/language/EditTemplate/Tags/Add/Button}}
					</$button>
				</$let>
			</span>
		</div>
		<div class="tc-block-dropdown-wrapper">
			<$reveal state=<<tagpicker-dropdown-id>> type="nomatch" text="">
				<div class="tc-block-dropdown tc-block-tags-dropdown">
					<$macrocall $name="tag-picker-listTags" filter=<<nonSystemTagsFilter>> suffix="-primaryList" />
					<hr>
					<$macrocall $name="tag-picker-listTags" filter=<<systemTagsFilter>> suffix="-secondaryList" />
				</div>
			</$reveal>
		</div>
	</div>
</$let>
\end

<!-- prepare all variables for tag-picker keyboard handling -->
\procedure tag-picker(actions, tagField:"tags", tiddler, tagListFilter:"[tags[]]")
\function _tf.getUserInput() [<storeTitle>get[text]]
\function _tf.getTag() [<newTagNameTiddler>get[text]]

<!-- keep those variables because they may "blead" into macros using old syntax -->
<$let
	saveTiddler={{{ [<tiddler>is[blank]then<currentTiddler>else<tiddler>] }}}
	palette={{$:/palette}}
	qualified=<<qualify "$:/temp/NewTagName">>
	newTagNameTiddler={{{ [[$:/temp/NewTagName]] [<tagField>!match[tags]] +[join[/]] [<qualify>] +[join[]] }}}
>
	<$macrocall $name="tag-picker-inner"/>
</$let>
\end